# Git branch in prompt.

parse_git_branch() {
  BRANCH="$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/')"
  if [ -z "$BRANCH" ]
    then
      #BRANCH="[${PWD} is not a git repo OR could not find a branch]"
      BRANCH=""
  fi
  echo $BRANCH
}

colored_git_branch_name() {
  echo -ne "${COLOR_GREEN}$(parse_git_branch)${COLOR_NO}"
}

#git Delete all the branches on remote: origin
# sample usage: delete_remote_branches origin

# This throws error. It's nothing; but find a way out.
### THIS IS DANGEROUS!!!
# delete_remote_branches() {
# "! [remote rejected] master (refusing to delete the current branch: refs/heads/master)"
#    current=`git branch | grep \* | awk '{print $2}'`
#    git branch -a | grep $1 | grep -v HEAD | grep -v ^$current$ | cut -d'/' -f3 | xargs -n 1 git push -d origin
# }

#git Delete local branches other than current

delete_local_branches() {
    git branch | grep -v \* | awk '{print $1}' | xargs -n 1 git branch -D
}

#git Delete all branches

delete_branches() {
   ## DANGER!!! delete_remote_branches origin
    delete_local_branches
}
